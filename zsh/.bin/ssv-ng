#!/bin/bash

## this scripts let's you select instances from an AWS profile, and ssh to them
## through a bastion server

# Colors
black() { echo -e "\033[30m${*}\033[0m"; }
red() { echo -e "\033[31m${*}\033[0m"; }
green() { echo -e "\033[32m${*}\033[0m"; }
yellow() { echo -e "\033[33m${*}\033[0m"; }
blue() { echo -e "\033[34m${*}\033[0m"; }
magenta() { echo -e "\033[35m${*}\033[0m"; }
cyan() { echo -e "\033[0;36m${*}\033[0m"; }
gray() { echo -e "\033[90m${*}\033[0m"; }
warn() { yellow "$(date) [WARNING] - $*"; }
err() {
  red "$(date) [ERROR] - $*"
  exit 1
}
info() { cyan "$(date) [INFO] - $*"; }

# FZF stuff
old_fzf_opts=$FZF_DEFAULT_OPTS
export FZF_DEFAULT_OPTS="--height 5% --layout=reverse"

get_all_instances() {
  filter_name=""
  pattern=$1
  if [[ -n $pattern ]]; then
    filter_name=('--filters' "Name=tag:Name,Values=*${pattern}*")
  fi
  aws ec2 describe-instances \
    ${filter_name[*]} \
    --query 'Reservations[].Instances[].[InstanceId, Tags[?Key==`Name`].Value[] | [0], PrivateIpAddress, PublicIpAddress]' \
    --output text | column -t
}

handle_profile() {
  if [[ -z $SELECTED_AWS_PROFILE ]]; then
    blue "Select AWS profile:"
    SELECTED_AWS_PROFILE=$(aws configure list-profiles | fzf)
  fi
  green "Selected profile: $SELECTED_AWS_PROFILE"
  export AWS_PROFILE=$SELECTED_AWS_PROFILE
}

handle_region() {
  if [[ -z $SELECTED_AWS_REGION ]]; then
    if [[ -f ~/.cache/aws_regions ]]; then
      aws_regions=$(cat ~/.cache/aws_regions)
    else
      aws_regions=$(aws ec2 describe-regions | jq -r '.Regions[].RegionName')
      echo "$aws_regions" >~/.cache/aws_regions
    fi
    blue "Select AWS region:"
    SELECTED_AWS_REGION=$(echo "$aws_regions" | fzf)
  fi
  green "Selected region: $SELECTED_AWS_REGION"
  export AWS_REGION=$SELECTED_AWS_REGION
}

handle_instance() {
  if [[ -z $INSTANCE_FILTER ]]; then
    blue 'Instance filter (leave blank for all instances): '
    read -r INSTANCE_FILTER
  fi

  all_instances=$(get_all_instances "$INSTANCE_FILTER")
  blue "Select instance:"
  SELECTED_INSTANCE=$(echo "$all_instances" | fzf | awk '{print $3}')
  if [[ -z $SELECTED_INSTANCE ]]; then
    err "No instance selected"
  fi
  # echo "$all_instances"
  # exit 1
  green "Selected instance: $SELECTED_INSTANCE"
}

find_ssh_user() {
  inst_ip=$1
  for inst_user in ec2-user centos admin ubuntu; do
    if ssh -J bastion -o ConnectTimeout=11 "${inst_user}@${inst_ip}" uptime >/dev/null 2>&1; then
      echo "user found: $inst_user"
      break
    fi
  done
}

# parse arguments
# -p = profile
# -r = region
# -h = help
# [instance_name] (optional) = instance name to ssh to
while getopts ":p:r:h" opt; do
  case $opt in
  p)
    SELECTED_AWS_PROFILE=$OPTARG
    ;;
  r)
    SELECTED_AWS_REGION=$OPTARG
    ;;
  h)
    echo "Usage: $0 [-p profile] [-r region] [instance_name_filter]"
    exit 0
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  esac
done
# handle named arguments
shift $((OPTIND - 1))
INSTANCE_FILTER=$1

handle_profile
handle_region
handle_instance
find_ssh_user "$SELECTED_INSTANCE"
echo "user: $inst_user"
ssh \
  -o ConnectTimeout=15 -o ConnectionAttempts=1 \
  -J bastion "${inst_user}@${SELECTED_INSTANCE}"
