scriptencoding utf-8
" Moshe's plugins and plugin configuration. Complementary to my .vimrc file

" .    .         .              .
" |\  /|         |             / \               o
" | \/ | .-. .--.|--. .-.     /___\.    ._.--.   .
" |    |(   )`--.|  |(.-'    /     \\  /  |  |   |
" '    ' `-' `--''  `-`--'  '       ``'   '  `--' `-

" Plugins {{{
let s:vimplug_dir = '~/.vim/plugged'
call plug#begin(s:vimplug_dir)

Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plug 'tpope/vim-vinegar'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'sheerun/vim-polyglot'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'dense-analysis/ale'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'vim-scripts/groovyindent-unix'
Plug 'chr4/nginx.vim'
" Plug 'prominic/groovy-language-server', { 'do': './gradlew build' }
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'prettier/vim-prettier', {
      \ 'do': 'yarn install',
      \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'StanAngeloff/php.vim', {'for': ['php']}
Plug 'rayburgemeestre/phpfolding.vim', {'for': ['php']}
Plug 'tfnico/vim-gradle'
Plug 'towolf/vim-helm'


Plug 'mogelbrod/vim-jsonpath'
Plug 'chrisbra/vim-sh-indent'
Plug 'hashivim/vim-terraform'

" Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" Plug 'epilande/vim-es2015-snippets'
" Plug 'epilande/vim-react-snippets'

Plug 'mg979/vim-visual-multi', {'branch': 'master'}
" Plug 'terryma/vim-expand-region'
Plug 'terryma/vim-smooth-scroll'

Plug 'christoomey/vim-system-copy'
Plug 'danro/rename.vim'
Plug 'pechorin/any-jump.vim'
Plug 'voldikss/vim-floaterm'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'junegunn/vim-easy-align'
Plug 'AndrewRadev/switch.vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/sideways.vim'

Plug 'simeji/winresizer'
Plug 'xolox/vim-session'


" Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag'
Plug 'luochen1990/rainbow'
Plug 'kshenoy/vim-signature'

" Plug 'tpope/vim-sleuth' " Causes issues with sh indentation

Plug 'mg979/do.vim'

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tonchis/vim-to-github'

" Plug 'Yggdroot/indentLine'

Plug 'xolox/vim-misc'
Plug 'ludovicchabant/vim-gutentags'

Plug 'sjl/gundo.vim', { 'on': 'GundoToggle' }

Plug 'editorconfig/editorconfig-vim'

Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
" Plug 'rafi/awesome-vim-colorschemes'
" Plug 'sonph/onehalf', { 'rtp': 'vim/' }
" Plug 'xolox/vim-colorscheme-switcher'
" Plug 'larsbs/vimterial_dark'
" Plug 'sjl/badwolf'
" Plug 'tyrannicaltoucan/vim-quantum'
" Plug 'sainnhe/sonokai'
" Plug 'arzg/vim-colors-xcode'
" Plug 'yuttie/hydrangea-vim'
Plug 'dracula/vim'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'sainnhe/edge'
" Plug 'itchyny/vim-cursorword'
Plug 'machakann/vim-highlightedyank'
" Plug 'miyakogi/conoline.vim'
Plug 'mhinz/vim-startify'
Plug 'vim-scripts/CursorLineCurrentWindow'

" Custom text object
Plug 'kana/vim-textobj-user'
Plug 'mattn/vim-textobj-url'
Plug 'kana/vim-textobj-line'
Plug 'bps/vim-textobj-python'
Plug 'rhysd/vim-textobj-anyblock'
Plug 'kana/vim-textobj-entire'
Plug 'vimtaku/vim-textobj-keyvalue'

" Devicons is last so it can support all of the other plugins
Plug 'ryanoasis/vim-devicons'

call plug#end()

if !isdirectory(expand(s:vimplug_dir))
  finish
endif

" }}}

" Plugin Configurations {{{

" ALE {{{
" let g:ale_disable_lsp = 1
" let g:ale_sign_error = 'âœ˜'
" let g:ale_sign_warning = 'ï„ª'
" nmap <silent> ]g <Plug>(ale_next_wrap)
" nmap <silent> [g <Plug>(ale_previous_wrap)
" nmap <leader>p <Plug>(ale_fix)
" let g:ale_echo_msg_format = '%linter% : %s'
" let g:ale_fixers = {
"       \ '*': ['remove_trailing_lines', 'trim_whitespace'],
"       \ 'javascript': ['prettier', 'eslint'],
"       \ 'sh': ['shfmt'],
"       \ 'terraform': ['terraform']
"       \}
" }}}

" Fzf {{{
" nnoremap <c-p> :Files
nnoremap <silent> <expr> <c-p> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"
let $FZF_DEFAULT_COMMAND = "rg --files --hidden -g '!.git/' --color=never"
" let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'
let $FZF_DEFAULT_OPTS    = '--bind ctrl-a:select-all'
" nnoremap <c-t> :Tags<cr>
nnoremap <c-b> :Buffers<cr>

" }}}

" Ultisnip {{{
let g:UltiSnipsExpandTrigger='<c-s>'
" }}}

" Vim auto pairs {{{
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutToggle = ''
" }}}

" Vim json path {{{
let g:jsonpath_register = '*'
" }}}

" WinResizer {{{
let g:winresizer_start_key = '<C-E>'
" }}}

" Floaterm {{{
let g:floaterm_keymap_toggle = '<F6>'
let g:floaterm_keymap_new    = '<F7>'
let g:floaterm_keymap_next   = '<F8>'
" }}}

" Vim do {{{
nnoremap \G :ShowDos \G<cr>
let g:vimdo = {}
let g:vimdo['\G'] = {
      \'label' : 'git commands', 'interactive':1, 'arbitrary': 1,
      \'compact':1, 'keys_width': 8, 'desc_width': 30,
      \'r':  ['reset', ":G reset\<cr>"],
      \'s':  ['status', ":Git\<cr>"],
      \'D':  ['diff HEAD', ":Gvsplit! diff HEAD\<cr>:setf git\<cr>:set foldmethod=syntax\<cr>"],
      \'b':  ['blame', ":Gblame\<cr>"],
      \'p':  ['push', ":redraw! \<bar>Gp\<cr>"],
      \'.':  ['add all', ":G add -A\<cr>"],
      \'l':  ['log current file', ":Glog\<cr>"],
      \'c':  ['commit', ":Gcommit\<cr>"],
      \'w':  ['stage file', ":Gwrite\<cr>"],
      \'d':  ['diff with...', ":Gvdiff\<space>"],
      \}
" }}}

" Switch vim {{{
" let g:switch_mapping = '-'
" The map switch is between underscores to camelCase: moshe_king -> mosheKing
" -> moshe_king
let g:switch_custom_definitions = [
      \   ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'],
      \   ['==', '!='],
      \   {
      \     '\<[a-z0-9]\+_\k\+\>': {
      \       '_\(.\)': '\U\1'
      \     },
      \     '\<[a-z0-9]\+[A-Z]\k\+\>': {
      \       '\([A-Z]\)': '_\l\1'
      \     },
      \   }
      \ ]
" }}}

" Sideways {{{
nnoremap <leader>h :SidewaysLeft<cr>
nnoremap <leader>l :SidewaysRight<cr>
" }}}

" Vim session {{{
let g:session_autoload = 'no'
let g:session_autosave = 'no'
" }}}

" Vim smooth scroll {{{
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 10, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 10, 2)<CR>
" }}}

" Editor config {{{
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" }}}

" Vim terraform {{{
let g:terraform_fmt_on_save=1
" }}}

" Vim easy align {{{
nmap ga <Plug>(EasyAlign)
" }}}

" Vim close tag {{{
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.erb,*.jsx,*.tsx,*.js'
let g:closetag_filetypes = 'html,xhtml,phtml,javascript,javascriptreact'
" }}}

" Vim visual multi {{{
let g:VM_maps = {}
" let g:VM_maps["Select Cursor Down"] = '<c-j>'      " start selecting down
" let g:VM_maps["Select Cursor Up"]   = '<c-k>'        " start selecting up
" }}}

" Color settings {{{

" Vim rainbow {{{
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle
" }}}

" Random color {{{
function! RandomColorChooser() abort
  let l:liked_colors =  [
        \ 'OceanicNext',
        \ 'apprentice',
        \ 'deep-space',
        \ 'dracula',
        \ 'onedark',
        \ 'onehalfdark',
        \ 'purify',
        \ 'quantum',
        \ 'sonokai',
        \ 'two-firewatch'
        \ ]
  let l:random_color = l:liked_colors[localtime() % len(l:liked_colors)]
  exe 'colorscheme '. l:random_color
endfunction
" call RandomColorChooser()
let g:edge_style = 'neon'
let g:palenight_terminal_italics=1
" colorscheme palenight
colo edge

" }}}

" }}}

" Undo tree {{{
nnoremap <leader>u :GundoToggle<CR>
let g:undotree_WindowLayout=2
let g:undotree_ShortIndicators=1
let g:undotree_SetFocusWhenToggle=1
" }}}

" Startify {{{

let g:startify_custom_header = [
      \'   ðŸ˜Ž               ðŸŽƒ              ðŸ˜Ž',
      \'    _   _         __     ___',
      \'   | \ | | ___  __\ \   / (_)_ __ ___',
      \'   |  \| |/ _ \/ _ \ \ / /| | ''_ ` _ \',
      \'   | |\  |  __/ (_) \ V / | | | | | | |',
      \'   |_| \_|\___|\___/ \_/  |_|_| |_| |_|',
      \'', '   ðŸš€               âœ¨              ðŸš€'
      \]

" }}}

" DevIcons {{{
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1
highlight! link NERDTreeFlags NERDTreeDir
" }}}

" " Vim airline (powerline) {{{
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#ale#enabled = 0
" let g:airline#extensions#battery#enabled = 0
" let g:airline#extensions#tabline#formatter = 'unique_tail'
" " https://github.com/neoclide/coc.nvim/issues/1827
" " slow Coc intellisense
" let g:airline#extensions#hunks#enabled = 0

" let g:airline_powerline_fonts = 1
" if !exists('g:airline_symbols')
"     let g:airline_symbols = {}
" endif
" let g:airline_symbols.space = "\ua0"
" " let g:airline_theme='cobalt2'
" " let g:airline_theme='molokai'
" let g:airline_theme='palenight'

" " Vim Battery
" " let g:battery#update_statusline = 1 " For statusline.


" " }}}

" Vim lightline {{{
let g:lightline = {
      \ 'colorscheme': 'edge',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified', 'filetype' ] ]
      \ },
      \ 'tabline': {
      \   'left': [ ['buffers'] ],
      \   'right': [ ['close'] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'filetype': 'LightlineDevIconsFiletype',
      \   'fileformat': 'LightlineDevIconsFileformat',
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers'
      \ },
      \ 'component_type': {
      \   'buffers': 'tabsel'
      \ }
      \ }

function! LightlineDevIconsFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightlineDevIconsFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

let g:lightline#bufferline#enable_devicons=1
let g:lightline#bufferline#filename_modifier = ':t'
" }}}

" GitGutter {{{
let g:gitgutter_map_keys = 0
let g:gitgutter_highlight_lines = 0
let g:gitgutter_highlight_linenrs = 1
nnoremap <leader>gc :GitGutterLineHighlightsToggle<cr>
nnoremap <leader>cag :GitGutterFold<cr>
nmap ]c <Plug>(GitGutterNextHunk)
nmap [c <Plug>(GitGutterPrevHunk)
function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}
highlight clear SignColumn
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#ffff61 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1
highlight! link SignColumn LineNr

" }}}

" Fugitive {{{

" Remove all conflict markers command
"Delete all Git conflict markers
"Creates the command :GremoveConflictMarkers
function! RemoveConflictMarkers() range
  echom a:firstline.'-'.a:lastline
  execute a:firstline.','.a:lastline . ' g/^<\{7}\|^|\{7}\|^=\{7}\|^>\{7}/d'
endfunction
"-range=% default is whole file
command! -range=% GremoveConflictMarkers <line1>,<line2>call RemoveConflictMarkers()


" Better branch choosing using :Gbranch
function! s:changebranch(...)
  let name = a:1
  if name ==? ''
    call inputsave()
    let name = input('Enter branch name: ')
    call inputrestore()
  endif
  execute 'Git checkout ' . name
endfunction

function! s:call_fzf_changebranch()
  call fzf#run({
        \ 'source': 'git for-each-ref --sort=-committerdate --format="%(refname:short)" | grep -n . | sed "s?origin/??g" | sort -t: -k2 -u | sort -n | cut -d: -f2',
        \ 'sink': function('s:changebranch')
        \ })

endfunction

command! -bang Gbranch call s:call_fzf_changebranch()
command! -bang Gb      call s:call_fzf_changebranch()
command! -nargs=? Gco call s:changebranch("<args>")

" Git push + pull + autocmd {{{

" Push
function! s:MosheGitPush() abort
  echo 'Pushing to ' . FugitiveHead() . '...'
  exe 'Git push -u origin ' . FugitiveHead()
  echo 'Pushed! ðŸ¤©'
endfunction

command! Gp call <sid>MosheGitPush()
nmap <silent> <leader>gp :Gp<cr>

" Pull
function! s:MosheGitPull() abort
  echo 'Pulling...'
  Git pull --quiet
  echo 'Pulled! ðŸ˜Ž'
endfunction

command! -bang Gl call <sid>MosheGitPull()
nmap <silent> <leader>gl :Gl<cr>

" Autocmd
function! s:ftplugin_fugitive() abort
  nnoremap <buffer> <silent> cc :Git commit --quiet<CR>
  nnoremap <buffer> <silent> gl :Gl<CR>
  nnoremap <buffer> <silent> gp :Gp<CR>
endfunction
augroup moshe_fugitive
  autocmd!
  autocmd FileType fugitive call s:ftplugin_fugitive()
augroup END

" }}}

" Git merge origin master
command! -bang Gmom G merge origin/master

" Create a new branch
function! Gcb(...)
  let name = a:1
  if name ==? ''
    call inputsave()
    let name = input('Enter branch name: ')
    call inputrestore()
  endif
  execute 'Git checkout -b ' . name
endfunction
command! -nargs=? Gcb call Gcb("<args>")

nnoremap <leader>gh :0Glog<cr>


function! ToggleGStatus()
  if buflisted(bufname('.git/index'))
    bd .git/index
  else
    Git
    " 20wincmd_
  endif
endfunction
command! ToggleGStatus :call ToggleGStatus()
nnoremap <silent> <leader>gg :ToggleGStatus<cr>

" Gdiffrev {{{
nmap <leader>dh :DiffHistory<Space>
command! DiffHistory call
command! -nargs=? DiffHistory call s:view_git_history("<args>")

function! s:view_git_history(...) abort
  let branch_name = a:1
  if branch_name !=? ''
    execute 'Git difftool --name-only ' . branch_name . '...@'
  else
    Git difftool --name-only ! !^@
  endif
  call s:diff_current_quickfix_entry()
  " Bind <CR> for current quickfix window to properly set up diff split layout after selecting an item
  " There's probably a better way to map this without changing the window
  copen
  nnoremap <buffer> <CR> <CR><BAR>:call <sid>diff_current_quickfix_entry()<CR>
  wincmd p
endfunction

function s:diff_current_quickfix_entry() abort
  " Cleanup windows
  for window in getwininfo()
    if window.winnr !=? winnr() && bufname(window.bufnr) =~? '^fugitive:'
      exe 'bdelete' window.bufnr
    endif
  endfor
  cc
  call s:add_mappings()
  let qf = getqflist({'context': 0, 'idx': 0})
  if get(qf, 'idx') && type(get(qf, 'context')) == type({}) && type(get(qf.context, 'items')) == type([])
    let diff = get(qf.context.items[qf.idx - 1], 'diff', [])
    echom string(reverse(range(len(diff))))
    for i in reverse(range(len(diff)))
      exe (i ? 'leftabove' : 'rightbelow') 'vert diffsplit' fnameescape(diff[i].filename)
      call s:add_mappings()
    endfor
  endif
endfunction

function! s:add_mappings() abort
  nnoremap <buffer>]q :cnext <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  nnoremap <buffer>[q :cprevious <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  " Reset quickfix height. Sometimes it messes up after selecting another item
  11copen
  wincmd p
endfunction
" }}}

" }}}
"
" }}}

" Coc {{{

" Plugins backup {{{
let g:coc_global_extensions = [
      \    'coc-cfn-lint',
      \    'coc-css',
      \    'coc-diagnostic',
      \    'coc-dictionary',
      \    'coc-docker',
      \    'coc-emmet',
      \    'coc-emoji',
      \    'coc-eslint',
      \    'coc-groovy',
      \    'coc-highlight',
      \    'coc-html',
      \    'coc-json',
      \    'coc-markdownlint',
      \    'coc-marketplace',
      \    'coc-neosnippet',
      \    'coc-pairs',
      \    'coc-prettier',
      \    'coc-python',
      \    'coc-react-refactor',
      \    'coc-scssmodules',
      \    'coc-sh',
      \    'coc-snippets',
      \    'coc-styled-components',
      \    'coc-swagger',
      \    'coc-syntax',
      \    'coc-tabnine',
      \    'coc-tag',
      \    'coc-tsserver',
      \    'coc-vimlsp',
      \    'coc-xml',
      \    'coc-yaml'
      \]
" }}}

" Install all plugins {{{

function! InstallAllCocExtensions() abort
  let all_extensions = get(g:, 'coc_global_extensions', [])
  let iterator = 10
  let counter = 0
  for extension in all_extensions
    if counter % iterator == 0
      echom string(all_extensions[counter : counter + iterator-1])
      call coc#util#install_extension([extension])
    endif
    let counter += 1
  endfor
endfunction

command! -bar -complete=custom,s:InstallOptions CocInstallAll
      \ :call InstallAllCocExtensions()

" }}}

" use <tab> for trigger completion and navigate to the next complete item {{{
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~? '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
let g:coc_snippet_next = '<tab>'
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" }}}

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif
" imap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() :
"       \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Project replace word
nnoremap <leader>prn :CocSearch <C-R>=expand("<cword>")<CR><CR>
vnoremap <leader>prn "iy:<c-u>CocSearch <C-R>i<CR><CR>

" Highlight the symbol and its references when holding the cursor.
" autocmd CursorHold * silent call CocActionAsync('highlight')
hi CocHighlightText ctermbg=241 guibg=#665c54
hi! link CocHoverRange CocHighlightText

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup format_coc_group
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
nmap <silent><expr> <leader>p CocHasProvider('format') ? "\<Plug>(coc-format)" : ":call FormatEqual()\<cr>"

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show commands.
nnoremap <silent><nowait> <leader>cc  :<C-u>CocList commands<cr>
nnoremap <silent><nowait> <leader>a  :<C-u>CocAction<cr>
" Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" }}}

" Nerd Tree {{{
"
" nnoremap <c-o> :NERDTreeToggle<cr>
nnoremap <silent> <Leader>v :NERDTreeFind<CR>
let NERDTreeChDirMode = 2
let NERDTreeHijackNetrw = 1
" Show hidden files
let NERDTreeShowHidden=1
" let NERDTreeDirArrowExpandable = 'â‡¾'
" let NERDTreeDirArrowCollapsible = 'â¤“'
let NERDTreeHighlightCursorline = 1
let g:NERDTreeGitStatusUseNerdFonts = 1
" let g:NERDTreeGitStatusConcealBrackets = 1

" Set icon for Jenkinsfile
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['Jenkinsfile'] = 'î˜•'
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['\..*ignore.*'] = 'î˜•'

" let g:NERDTreePatternMatchHighlightColor = {}
" let g:NERDTreePatternMatchHighlightColor['\..*ignore.*'] = 'EE6E73'
" let g:NERDTreePatternMatchHighlightColor['Jenkinsfile'] = '62a2bf'

" If more than one window and previous buffer was NERDTree, go back to it.
" autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr("$") > 1 | b# | endif

augroup nerd_tree_augroup
  autocmd!
  " Highlight currently open buffer in NERDTree
  autocmd BufEnter * call SyncTree()
  " Close VIM if NERDTree is the only buffer left
  autocmd BufEnter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | q | endif
augroup END

" Check if NERDTree is open or active
function! IsNERDTreeOpen()
  return exists('t:NERDTreeBufName') && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
function! SyncTree()
  if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
    wincmd p
  endif
endfunction


function! ToggleNerdTree()
  set eventignore=BufEnter
  NERDTreeToggle
  set eventignore=
endfunction
nmap <silent> <C-o> :call ToggleNerdTree()<CR>

function! ToggleNerdFugitiveVimStartup(timer)
  let l:firstbuf = bufnr('%')
  echom 'firstbuf '. l:firstbuf
  Git
  let l:gitbuf = bufnr('%')
  hide
  call ToggleNerdTree()
  new
  exe 'buf' . l:gitbuf
  set buflisted
  let g:git_opened_by_func = 1
  let l:winids = win_findbuf(l:firstbuf)
  call win_gotoid(l:winids[0])
endfunc

function! CloseNERDGitWindows() abort
  if buflisted(bufname('.git/index'))
    buf .git/index
    bd .git/index
  endif
  if (winnr('$') != 1) && exists(':NERDTreeClose')
    NERDTreeClose
  endif
endfunction

" Reorganize all buffers
function! ReorganizeAllWindows(timer)
  call CloseNERDGitWindows()
  call ToggleNerdFugitiveVimStartup('')
endfunction

nnoremap <leader>ow :call ReorganizeAllWindows("")<cr>
nnoremap <leader>cw :call CloseNERDGitWindows()<cr>

" }}}
