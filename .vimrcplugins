" Moshe's plugins and plugin configuration. Complementary to my .vimrc file

" .    .         .              .
" |\  /|         |             / \               o
" | \/ | .-. .--.|--. .-.     /___\.    ._.--.   .
" |    |(   )`--.|  |(.-'    /     \\  /  |  |   |
" '    ' `-' `--''  `-`--'  '       ``'   '  `--' `-

" Plugins {{{
let vimplug_dir = '~/.vim/plugged'
call plug#begin(vimplug_dir)
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'

Plug 'sheerun/vim-polyglot'
Plug 'neoclide/coc.nvim', { 'do': { -> '!brew install yarn' } }
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'vim-scripts/groovyindent-unix'
Plug 'chr4/nginx.vim'
" Plug 'prominic/groovy-language-server', { 'do': './gradlew build' }
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }

Plug 'mogelbrod/vim-jsonpath'
Plug 'chrisbra/vim-sh-indent'
Plug 'hashivim/vim-terraform'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'

Plug 'terryma/vim-multiple-cursors'
" Plug 'terryma/vim-expand-region'
Plug 'terryma/vim-smooth-scroll'

Plug 'christoomey/vim-system-copy'
Plug 'danro/rename.vim'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'junegunn/vim-easy-align'
Plug 'AndrewRadev/switch.vim'

Plug 'simeji/winresizer'
Plug 'xolox/vim-session'

Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag'
Plug 'luochen1990/rainbow'

" Plug 'tpope/vim-sleuth' " Causes issues with sh indentation

Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'Moshem123/vim-to-github'

" Plug 'Yggdroot/indentLine'

" Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'
Plug 'ludovicchabant/vim-gutentags'

Plug 'sjl/gundo.vim', { 'on': 'GundoToggle' }

Plug 'editorconfig/editorconfig-vim'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'dracula/vim'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'sonph/onehalf', { 'rtp': 'vim/' }
Plug 'xolox/vim-colorscheme-switcher'
Plug 'larsbs/vimterial_dark'
Plug 'sjl/badwolf'
Plug 'tyrannicaltoucan/vim-quantum'
Plug 'sainnhe/sonokai'
Plug 'arzg/vim-colors-xcode'
Plug 'yuttie/hydrangea-vim'
" Plug 'norcalli/nvim-colorizer.lua' " Requires termguicolors which changes
" the coolness of the color scheme :)
" Plug 'itchyny/vim-cursorword'
Plug 'machakann/vim-highlightedyank'
" Plug 'miyakogi/conoline.vim'
Plug 'mhinz/vim-startify'

" Custom text object
Plug 'kana/vim-textobj-user'
Plug 'mattn/vim-textobj-url'
Plug 'kana/vim-textobj-line'
Plug 'bps/vim-textobj-python'
Plug 'rhysd/vim-textobj-anyblock'
Plug 'kana/vim-textobj-entire'
Plug 'vimtaku/vim-textobj-keyvalue'
Plug 'saihoooooooo/vim-textobj-space'

" Devicons is last so it can support all of the other plugins
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

call plug#end()
" }}}

" Plugin Configurations {{{

" Fzf {{{
" nnoremap <c-p> :Files
nnoremap <silent> <expr> <c-p> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'
nnoremap <leader>t :Tags<cr>

nnoremap <c-b> :Buffers<cr>

" }}}

" Ultisnip {{{
let g:UltiSnipsExpandTrigger="<c-s>"
" }}}

" Vim auto pairs {{{
let g:AutoPairsShortcutJump = ""
" }}}

" Vim json path {{{
let g:jsonpath_register = '*'
" }}}

" WinResizer {{{
let g:winresizer_start_key = '<C-E>'
" }}}

" Vim which key {{{
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
" }}}

" Switch vim {{{
" let g:switch_mapping = '-'
" The map switch is between underscores to camelCase: moshe_king -> mosheKing
" -> moshe_king
let g:switch_custom_definitions = [
            \   ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'],
            \   ["==", "!="],
            \   {
            \     '\<[a-z0-9]\+_\k\+\>': {
            \       '_\(.\)': '\U\1'
            \     },
            \     '\<[a-z0-9]\+[A-Z]\k\+\>': {
            \       '\([A-Z]\)': '_\l\1'
            \     },
            \   }
            \ ]
" }}}

" Vim session {{{
let g:session_autoload = 'no'
let g:session_autosave = 'no'
" }}}

" Vim smooth scroll {{{
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 10, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 10, 2)<CR>
" }}}

" Editor config {{{
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" }}}

" Vim terraform {{{
let g:terraform_fmt_on_save=1
" }}}

" Vim easy align {{{
nmap ga <Plug>(EasyAlign)
" }}}

" Vim close tag {{{
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.erb,*.jsx,*.tsx,*.js"
let g:closetag_filetypes = 'html,xhtml,phtml,javascript,javascriptreact'
" }}}

" Vim multiple cursors {{{
let g:multi_cursor_select_all_key      = '<leader>sa'
" nnoremap <leader>sa :call multiple_cursors#select_all("n", 0)<CR>
" }}}

" Color settings {{{

" " Vim DevIcons colors {{{
" let g:sol = {
"             \"gui": {
"             \"base03": "#002b36",
"             \"base02": "#073642",
"             \"base01": "#586e75",
"             \"base00": "#657b83",
"             \"base0": "#839496",
"             \"base1": "#93a1a1",
"             \"base2": "#eee8d5",
"             \"base3": "#fdf6e3",
"             \"yellow": "#b58900",
"             \"orange": "#cb4b16",
"             \"red": "#dc322f",
"             \"magenta": "#d33682",
"             \"violet": "#6c71c4",
"             \"blue": "#268bd2",
"             \"cyan": "#2aa198",
"             \"green": "#719e07"
"             \},
"             \"cterm": {
"             \"base03": 8,
"             \"base02": 0,
"             \"base01": 10,
"             \"base00": 11,
"             \"base0": 12,
"             \"base1": 14,
"             \"base2": 7,
"             \"base3": 15,
"             \"yellow": 3,
"             \"orange": 9,
"             \"red": 1,
"             \"magenta": 5,
"             \"violet": 13,
"             \"blue": 4,
"             \"cyan": 6,
"             \"green": 2
"             \}
"             \}

" function! DeviconsColors(config)
"     let colors = keys(a:config)
"     augroup devicons_colors
"         autocmd!
"         for color in colors
"             if color == 'normal'
"                 exec 'autocmd FileType nerdtree,startify if &background == ''dark'' | '.
"                             \ 'highlight devicons_'.color.' guifg='.g:sol.gui.base01.' ctermfg='.g:sol.cterm.base01.' | '.
"                             \ 'else | '.
"                             \ 'highlight devicons_'.color.' guifg='.g:sol.gui.base1.' ctermfg='.g:sol.cterm.base1.' | '.
"                             \ 'endif'
"             elseif color == 'emphasize'
"                 exec 'autocmd FileType nerdtree,startify if &background == ''dark'' | '.
"                             \ 'highlight devicons_'.color.' guifg='.g:sol.gui.base1.' ctermfg='.g:sol.cterm.base1.' | '.
"                             \ 'else | '.
"                             \ 'highlight devicons_'.color.' guifg='.g:sol.gui.base01.' ctermfg='.g:sol.cterm.base01.' | '.
"                             \ 'endif'
"             else
"                 exec 'autocmd FileType nerdtree,startify highlight devicons_'.color.' guifg='.g:sol.gui[color].' ctermfg='.g:sol.cterm[color]
"             endif
"             exec 'autocmd FileType nerdtree,startify syntax match devicons_'.color.' /\v'.join(a:config[color], '|').'/ containedin=ALL'
"         endfor
"     augroup END
" endfunction
" let g:devicons_colors = {
"             \'normal': ['', '', '', '', ''],
"             \'emphasize': ['', '', '', '', '', '', '', '', '', '', ''],
"             \'yellow': ['', '', ''],
"             \'orange': ['', '', '', 'λ', '', ''],
"             \'red': ['', '', '', '', '', '', '', '', ''],
"             \'magenta': [''],
"             \'violet': ['', '', '', ''],
"             \'blue': ['', '', '', '', '', '', '', '', '', '', '', '', ''],
"             \'cyan': ['', '', '', ''],
"             \'green': ['', '', '', '']
"             \}
" call DeviconsColors(g:devicons_colors)
" " }}}

" Vim rainbow {{{
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle
" }}}

" colorizer
" lua REQUIRE'colorizer'.setup()
" theme
" colorscheme badwolf
" colorscheme purify
" colorscheme dracula
" let g:quantum_black=1
" let g:quantum_italics=1
" colorscheme lucius
" colorscheme OceanicNext

" Random color {{{
function RandomColorChooser() abort
    let l:liked_colors =  [
                \ "OceanicNext",
                \ "Papercolor",
                \ "abstract",
                \ "afterglow",
                \ "alduin",
                \ "anderson",
                \ "apprentice",
                \ "ayu",
                \ "carbonized-dark",
                \ "deep-space",
                \ "deus",
                \ "dracula",
                \ "flattened_dark",
                \ "hybrid",
                \ "onedark",
                \ "onehalfdark",
                \ "pink-moon",
                \ "purify",
                \ "quantum",
                \ "rakr",
                \ "snow",
                \ "sonokai",
                \ "stellarized",
                \ "yellow-moon"
                \ ]
    let l:random_color = l:liked_colors[localtime() % len(l:liked_colors)]
    exe 'colorscheme '. l:random_color
endfunction
call RandomColorChooser()
" }}}

" }}}

" Undo tree {{{
nnoremap <leader>u :GundoToggle<CR>
let g:undotree_WindowLayout=2
let g:undotree_ShortIndicators=1
let g:undotree_SetFocusWhenToggle=1
" }}}

" Ack {{{
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
nnoremap <c-f> :Ack! ""<left>

" }}}

" DevIcons {{{
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1
highlight! link NERDTreeFlags NERDTreeDir
" }}}

" Vim airline (powerline) {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
" let g:airline_theme='cobalt2'
" let g:airline_theme='molokai'
let g:airline_theme='oceanicnext'

" https://github.com/neoclide/coc.nvim/issues/1827
" slow Coc intellisense
let g:airline#extensions#hunks#enabled = 0
" }}}

" GitGutter {{{
let g:gitgutter_highlight_lines = 0
let g:gitgutter_highlight_linenrs = 1
nnoremap <leader>gc :GitGutterLineHighlightsToggle<cr>
nnoremap <leader>cag :GitGutterFold<cr>
function! GitStatus()
    let [a,m,r] = GitGutterGetHunkSummary()
    return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}
highlight clear SignColumn
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=yellow
" }}}

" Fugitive {{{

" Remove all conflict markers command
"Delete all Git conflict markers
"Creates the command :GremoveConflictMarkers
function! RemoveConflictMarkers() range
    echom a:firstline.'-'.a:lastline
    execute a:firstline.','.a:lastline . ' g/^<\{7}\|^|\{7}\|^=\{7}\|^>\{7}/d'
endfunction
"-range=% default is whole file
command! -range=% GremoveConflictMarkers <line1>,<line2>call RemoveConflictMarkers()


" Better branch choosing using :Gbranch
function! s:changebranch(branch)
    execute 'Git checkout ' . a:branch
    call feedkeys("i")
endfunction

function! s:call_fzf_changebranch()
    call fzf#run({
            \ 'source': 'git for-each-ref --sort=-committerdate --format="%(refname:short)" | grep -n . | sed "s?origin/??g" | sort -t: -k2 -u | sort -n | cut -d: -f2',
            \ 'sink': function('s:changebranch')
            \ })

endfunction

command! -bang Gbranch call s:call_fzf_changebranch()
command! -bang Gb      call s:call_fzf_changebranch()
" Set branch upstream
command! -bang Gpsup !git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)

" Git push
command! -bang Gp Gpush

" Git pull
command! -bang Gl Gpull

" Create a new branch
function! Gcb(...)
    let name = a:1
    if name == ""
        call inputsave()
        let name = input('Enter branch name: ')
        call inputrestore()
    endif
    execute "!git checkout -b " . name
endfunction
command! -bang -nargs=? Gcb call Gcb("<args>")

nnoremap <leader>gh :0Glog<cr>

function! ToggleGStatus()
    if buflisted(bufname('.git/index'))
        bd .git/index
    else
        Git
    endif
endfunction
command! ToggleGStatus :call ToggleGStatus()
nnoremap <leader>gs :ToggleGStatus<CR>
nnoremap <leader>gg :ToggleGStatus<cr>

" Gdiffrev {{{
command! DiffHistory call s:view_git_history()

function! s:view_git_history() abort
    Git difftool --name-only ! !^@
    call s:diff_current_quickfix_entry()
    " Bind <CR> for current quickfix window to properly set up diff split layout after selecting an item
    " There's probably a better way to map this without changing the window
    copen
    nnoremap <buffer> <CR> <CR><BAR>:call <sid>diff_current_quickfix_entry()<CR>
    wincmd p
endfunction

function s:diff_current_quickfix_entry() abort
    " Cleanup windows
    for window in getwininfo()
        if window.winnr !=? winnr() && bufname(window.bufnr) =~? '^fugitive:'
            exe 'bdelete' window.bufnr
        endif
    endfor
    cc
    call s:add_mappings()
    let qf = getqflist({'context': 0, 'idx': 0})
    if get(qf, 'idx') && type(get(qf, 'context')) == type({}) && type(get(qf.context, 'items')) == type([])
        let diff = get(qf.context.items[qf.idx - 1], 'diff', [])
        echom string(reverse(range(len(diff))))
        for i in reverse(range(len(diff)))
            exe (i ? 'leftabove' : 'rightbelow') 'vert diffsplit' fnameescape(diff[i].filename)
            call s:add_mappings()
        endfor
    endif
endfunction

function! s:add_mappings() abort
    nnoremap <buffer>]q :cnext <BAR> :call <sid>diff_current_quickfix_entry()<CR>
    nnoremap <buffer>[q :cprevious <BAR> :call <sid>diff_current_quickfix_entry()<CR>
    " Reset quickfix height. Sometimes it messes up after selecting another item
    11copen
    wincmd p
endfunction
" }}}

" Set current working directory based on the file
" autocmd BufEnter * silent! :lcd%:p:h
" }}}

" }}}

" Coc {{{

" Plugins backup {{{
let g:coc_global_extensions = [
            \    "coc-css",
            \    "coc-diagnostic",
            \    "coc-react-refactor",
            \    "coc-dictionary",
            \    "coc-docker",
            \    "coc-groovy",
            \    "coc-html",
            \    "coc-json",
            \    "coc-markdownlint",
            \    "coc-marketplace",
            \    "coc-neosnippet",
            \    "coc-prettier",
            \    "coc-pyright",
            \    "coc-python",
            \    "coc-sh",
            \    "coc-snippets",
            \    "coc-syntax",
            \    "coc-styled-components",
            \    "coc-tag",
            \    "coc-tsserver",
            \    "coc-ultisnips",
            \    "coc-vimlsp",
            \    "coc-yaml"
            \]
"" }}}

" use <tab> for trigger completion and navigate to the next complete item {{{
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<Tab>" :
            \ coc#refresh()
let g:coc_snippet_next = '<tab>'
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" }}}

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif
" imap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() :
"       \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
nmap <leader>p <Plug>(coc-format)

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show commands.
nnoremap <silent><nowait> <leader>cc  :<C-u>CocList commands<cr>
" Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" }}}

" Nerd Tree {{{
"
" nnoremap <c-o> :NERDTreeToggle<cr>
nnoremap <silent> <Leader>v :NERDTreeFind<CR>
let g:NERDTreeChDirMode = 2
let g:NERDTreeHijackNetrw=0
" autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr("$") > 1 | b# | endif " Not sure what it does
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif " Close VIM if NERDTree is the only buffer left

" Check if NERDTree is open or active
function! IsNERDTreeOpen()
    return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
function! SyncTree()
    if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
        NERDTreeFind
        wincmd p
    endif
endfunction

" Show hidden files
let NERDTreeShowHidden=1

let g:NERDTreeLimitedSyntax = 1

" Highlight currently open buffer in NERDTree
autocmd BufEnter * call SyncTree()

function! ToggleNerdTree()
    set eventignore=BufEnter
    NERDTreeToggle
    set eventignore=
endfunction
nmap <C-o> :call ToggleNerdTree()<CR>

function! ToggleNerdFugitiveVimStartup(timer)
    let l:firstbuf = bufnr('%')
    echom "firstbuf ". l:firstbuf
    Git
    let l:gitbuf = bufnr('%')
    hide
    call ToggleNerdTree()
    new
    exe 'buf' . l:gitbuf
    set buflisted
    let g:git_opened_by_func = 1
    let l:winids = win_findbuf(l:firstbuf)
    call win_gotoid(l:winids[0])
endfunc

function! CloseNERDGitWindows() abort
    if buflisted(bufname('.git/index'))
        buf .git/index
        bd .git/index
    endif
    if (winnr("$") != 1) && exists(":NERDTreeClose")
        NERDTreeClose
    endif
endfunction

" Reorganize all buffers
function! ReorganizeAllWindows(timer)
    call CloseNERDGitWindows()
    call ToggleNerdFugitiveVimStartup("")
endfunction

nnoremap <leader>ow :call ReorganizeAllWindows("")<cr>
nnoremap <leader>cw :call CloseNERDGitWindows()<cr>

" }}}
